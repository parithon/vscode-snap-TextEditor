# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
    include:
    - master
    - vnext

pr: none

jobs:
  - job: 'Build'
    
    strategy:
      maxParallel: 3
      matrix:
        linux_node-12.4:
          imageName: 'ubuntu-16.04'
          node_version: 12.4
        windows_node-12.4:
          imageName: 'vs2017-win2016'
          node_version: 12.4
        # macOS_node-12.4:
        #   imageName: 'macos-10.13'
        #   node_version: 12.4
    
    pool:      
      vmImage: $(imageName)
      
    steps:
      - task: NodeTool@0
        displayName: 'Use node $(node_version)'
        inputs:
          versionSpec: $(node_version)
      
      - task: Npm@1
        displayName: 'Install dependencies'
        inputs:
          command: install
          verbose: false

      - task: Npm@1
        displayName: 'Compile TypeScript'
        inputs:
          command: custom
          customCommand: 'run compile'
          verbose: false

      - task: Bash@3
        displayName: 'Start xvfb if running Linux'
        condition: eq(variables['Agent.OS'], 'Linux')
        inputs:
          targetType: 'inline'
          script: |
            set -e
            /usr/bin/Xvfb :10 -ac >> /tmp/Xvfb.out 2>&1 &
            disown -ar

      - task: Npm@1
        displayName: 'Run Tests'
        env:
          DISPLAY: :10
        inputs:
          command: custom
          customCommand: 'run test'
          verbose: false

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/test-results-*.xml'
          testRunTitle: '$(Agent.OS)'
      
  - job: 'Publish'
    displayName: 'Publish VSIX Package'
    dependsOn: 'Build'
    condition: succeeded()

    pool:
      vmImage: 'ubuntu-16.04'
    
    steps:
      - task: NodeTool@0
        displayName: 'Use node 12.x'
        inputs:
          versionSpec: 12.x
      
      - task: Npm@1
        displayName: 'Install dependencies'
        inputs:
          command: install
          verbose: false

      ## Need to create a way to bump semver in package.json
      - task: PowerShell@2
        displayName: 'Verify NPM version with Tag version'
        inputs:
          targetType: 'inline'
          script: '
            $tagversion = git ls-remote --tags https://github.com/parithon/vscode-snap-TextEditor.git | Select-String -Pattern "\d+\.\d+\.\d+$" | Select-Object -ExpandProperty Matches | Select-Object -ExpandProperty Value
            $npmversion = Select-String -Path package.json -Pattern """version"": ""\d+\.\d+\.\d+" | Select-Object -First 1 | Select-Object -ExpandProperty Matches | Select-Object -ExpandProperty Value | ForEach-Object { $_.Substring(12) }
            if ($tagversion -eq $npmversion) {
              Write-Error "NPM version $npmversion matches an existing GIT Tag ($tagversion); tag already exists."
            }
          '
          pwsh: true
      
      - task: Npm@1
        displayName: 'Create VSIX package'
        inputs:
          command: custom
          customCommand: 'run package'
          verbose: false

      - task: PowerShell@2
        displayName: 'Generate release notes'
        inputs:
          targetType: 'inline'
          # The following script will generate release notes in the releasenotes workingDirectory
          # based on the CHANGELOG.md file and the section between the first and second matched results
          # matching the pattern [v1.0.0]. Additionally, it will use the pattern as the postfix
          # for the release notes. These release notes will then be used in the 'Releases' pipeline
          # when editing the release/tag entry on Github. (i.e. RELEASE-v1.0.1.md).
          # EXAMPLE:
          #
          #  NOT INCLUDED
          #
          #  [v1.0.1] NOT INCLUDED
          #  THIS WILL BE INCLUDED IN THE RELEASE NOTES
          #  [v1.0.0] NOT INCLUDED
          #
          script: '
            New-Item -Type Directory -Path releasenotes -Force | Out-Null;
            $pattern = "\[v\d+\.\d+\.\d+\]";
            $content = Get-Content -Path ./CHANGELOG.md;
            $startLine = $content | Select-String -Pattern $pattern | Select -First 1 -ExpandProperty LineNumber;
            $endLine = $content | Select-String -Pattern $pattern | Select -Skip 1 -First 1 -ExpandProperty LineNumber;
            $postfix = $content | Select-Object -Skip ($startLine - 1) -First 1 | Select-String -Pattern "v\d+\.\d+\.\d+";
            $content | Select-Object -Index (($startLine + 1)..($endLine - 2)) | Out-File -FilePath "releasenotes/RELEASE-$($postfix.Matches.Value).md";
          '
          pwsh: true

      - task: CopyFiles@2
        displayName: 'Copy release notes to staging directory'
        inputs:
          SourceFolder: './releasenotes'
          Contents: '**'
          TargetFolder: '$(Build.ArtifactStagingDirectory)/releasenotes'
          CleanTargetFolder: true

      - task: CopyFiles@2
        displayName: 'Copy release.vsix to staging directory'
        inputs:
          SourceFolder: '.'
          Contents: 'release.vsix'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
          OverWrite: true

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'release'
          publishLocation: 'Container'
